{"version":3,"sources":["components/Pagination/Pagination.tsx","components/List/List.tsx","reducers/animeReducer.ts","helpers/usePagination.ts","components/App/index.ts","components/App/App.tsx","serviceWorker.ts","reducers/rootReducer.ts","reducers/simpleReducer.ts","store.ts","index.tsx"],"names":["Pagination","pageSize","setPageSize","currentPage","setCurrentPage","goLeft","goRight","pages","className","map","p","key","onClick","e","connect","state","loadAnime","name","limit","page","types","payload","request","url","props","pageLength","currentPageLength","activePage","visiblePages","totalItems","useState","useEffect","useMemo","possiblePages","Math","ceil","Array","fill","i","idx","startPage","floor","usePagination","searchString","setSearchString","inputText","setInputText","id","onSubmit","event","preventDefault","placeholder","value","onChange","target","type","animeReducer","loadingUrl","results","char","CharacterCard","title","style","backgroundImage","image_url","App","List","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","combineReducers","simpleReducer","action","result","process","loading","data","client","axios","create","baseURL","responseType","ReactDOM","render","StrictMode","store","initialState","createStore","rootReducer","applyMiddleware","thunk","axiosMiddleware","configureStore","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1cf0349d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface pagination {\n  pageSize?: number;\n  setPageSize?: (id: number) => void;\n  currentPage: number;\n  setCurrentPage: (id: number) => void;\n  goLeft?: () => void;\n  goRight?: () => void;\n  pages: number[];\n}\nexport const Pagination: React.FC<pagination> = ({\n  pageSize = 10,\n  setPageSize = null,\n  currentPage = 1,\n  setCurrentPage,\n  goLeft = null,\n  goRight = null,\n  pages = [],\n}) => {\n  return (\n    <div className=\"flex pagination-container\">\n      <ul className=\"pages\">\n        {pages.map((p) => (\n          <li\n            key={p}\n            onClick={(e) => setCurrentPage(p)}\n            className={`page-number ${currentPage === p ? \"active\" : \"\"}`}\n          >\n            {p}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { loadAnime } from \"../../reducers/animeReducer\";\nimport usePagination from \"../../helpers/usePagination\";\nimport {Pagination} from '../Pagination'\n\nexport default connect(\n  (state) => ({\n    ...state,\n  }),\n  { loadAnime }\n)(List);\n\nfunction List({ ...props }) {\n  const {\n    pageSize,\n    setPageSize,\n    currentPage,\n    setCurrentPage,\n    goLeft,\n    goRight,\n    pages,\n  } = usePagination({});\n\n  const [searchString, setSearchString] = useState<string>(\"\");\n  const [inputText, setInputText] = useState<string>(\"\");\n  function simpleAction() {\n    props.loadAnime(searchString, pageSize, currentPage);\n  }\n\n  useEffect(() => {\n    if (searchString) simpleAction();\n  }, [searchString, pageSize, currentPage]);\n\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    setSearchString(inputText);\n  }\n\n  return (\n    <div className=\"list-container\">\n      <form id=\"searchForm\" onSubmit={handleSubmit} className=\"flex left\">\n        <input\n          placeholder=\"Enter your query\"\n          value={inputText}\n          onChange={(e) => setInputText(e.target.value)}\n          type=\"search\"\n        />\n        <button>Go</button>\n      </form>\n      <div className=\"loading\">\n        {props.animeReducer?.loadingUrl && (\n          <>\n            <span className=\"loading--heading\">Requesting:</span>\n            <span className=\"loading--url\">\n              {props.animeReducer.loadingUrl}\n            </span>\n          </>\n        )}\n      </div>\n      <div className=\"card-container\">\n        {props?.animeReducer?.results?.map((char) => (\n          <CharacterCard key={char.title} {...char} />\n        ))}\n      </div>\n      {props.animeReducer?.results ? (\n        <Pagination\n          pages={pages}\n          pageSize={pageSize}\n          currentPage={currentPage}\n          setCurrentPage={setCurrentPage}\n        />\n      ) : (\n        <div />\n      )}\n    </div>\n  );\n}\n\nfunction CharacterCard({ ...props }) {\n  return (\n    <div\n      className=\"card\"\n      style={{ backgroundImage: `url(${props.image_url})` }}\n    >\n      <div className=\"card--name\">{props.title}</div>\n    </div>\n  );\n}\n","import { ReducerAction, Dispatch } from \"react\";\nimport { Action } from \"redux\";\n\ninterface Action2 extends Action {\n  payload: any;\n  data?: Object;\n}\n\nexport default (state = {}, action: Action2) => {\n  switch (action.type) {\n    case \"REQUEST\":\n      return {\n        ...state,\n        loadingUrl: process.env.REACT_APP_BASE_URL+action.payload.request.url,\n        loading: true,\n      };\n    case \"SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        loadingUrl: '',\n        ...action.payload.data,\n      };\n    case \"FAILURE\":\n      return {\n        ...state,\n        loadingUrl: '',\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport function loadAnime(name: string, limit: number, page: number) {\n  return {\n    types: [\"REQUEST\", \"SUCCESS\", \"FAILURE\"],\n    payload: {\n      request: {\n        url: `${name}&limit=${limit}&page=${page}`,\n      },\n    },\n  };\n}\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\n\ninterface paginationProps {\n  pageSize?: number;\n  currentPage?: number;\n  pages?: any;\n}\n\ninterface pagination {\n  pageSize: number;\n  setPageSize?: (id: number) => void;\n  currentPage: number;\n  setCurrentPage: (id: number) => void;\n  goLeft?: () => void;\n  goRight?: () => void;\n  pages: number[];\n}\nexport default function usePagination({\n  pageLength = 10,\n  currentPageLength = 10,\n  activePage = 1,\n  visiblePages = 5,\n  totalItems = 50000,\n  ...rest\n}): pagination {\n  const [pageSize, setPageSize] = useState(10);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    setPageSize(pageLength);\n    setCurrentPage(activePage);\n  }, [currentPageLength, activePage]);\n\n  let pages = useMemo(() => {\n    let pages: number[] = [];\n    if (totalItems && totalItems > 0) {\n      const possiblePages = Math.ceil(totalItems / pageSize);\n      if (possiblePages <= visiblePages) {\n        pages = Array(possiblePages)\n          .fill(0)\n          .map((i, idx) => idx + 1);\n      } else if (possiblePages > visiblePages) {\n        let startPage: number;\n        if (currentPage <= Math.ceil(visiblePages / 2)) {\n          startPage = 1;\n        } else {\n          startPage = currentPage - Math.floor(visiblePages / 2);\n        }\n\n        if (startPage + visiblePages > possiblePages) {\n          startPage = possiblePages + 1 - visiblePages;\n        }\n        pages = Array(visiblePages)\n          .fill(0)\n          .map((i, idx) => idx + startPage);\n      }\n    }\n    return pages;\n  }, [totalItems, pageSize, visiblePages, currentPage]);\n\n  function goLeft() {\n    if (currentPageLength > 1) {\n      setCurrentPage((currentPage) => currentPage - 1);\n    }\n  }\n  function goRight() {\n    setCurrentPage((currentPage) => currentPage + 1);\n  }\n  return {\n    pageSize,\n    setPageSize,\n    currentPage,\n    setCurrentPage,\n    goLeft,\n    goRight,\n    pages,\n  };\n}\n","import App from './App'\nexport default App","import React, { useEffect, useState } from 'react';\nimport {List} from '../List';\nimport './App.scss';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <List/>\n    </div>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport simpleReducer from \"./simpleReducer\";\nimport animeReducer from './animeReducer';\n\nexport default combineReducers({\n  simpleReducer,\n  animeReducer\n});\n","import { ReducerAction, Dispatch } from \"react\";\nimport { Action } from \"redux\";\n\n\ninterface Action2 extends Action{\n  payload: any;\n}\nexport default (state = {}, action:Action2) => {\n  switch (action.type) {\n    case \"SIMPLE_ACTION\":\n      return {\n        result: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const simpleAction = () => {\n  return {\n    type: \"SIMPLE_ACTION\",\n    payload: \"result_of_simple_action\",\n  }\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport axiosMiddleware from \"redux-axios-middleware\";\nimport axios from \"axios\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst client = axios.create({\n  //all axios can be used, shown in axios documentation\n  baseURL: process.env.REACT_APP_BASE_URL,\n  responseType: \"json\",\n});\n\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk, axiosMiddleware(client))\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}