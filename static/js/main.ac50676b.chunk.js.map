{"version":3,"sources":["App.tsx","reducers/animeReducer.ts","serviceWorker.ts","reducers/rootReducer.ts","reducers/simpleReducer.ts","store.ts","index.tsx"],"names":["App","className","ListPage","connect","state","loadAnime","name","limit","page","types","payload","request","url","props","useState","searchString","setSearchString","inputText","setInputText","useEffect","id","onSubmit","event","preventDefault","value","onChange","e","target","type","animeReducer","loadingUrl","results","map","char","CharacterCard","style","backgroundImage","image_url","title","Boolean","window","location","hostname","match","combineReducers","simpleReducer","action","result","process","loading","data","client","axios","create","baseURL","responseType","ReactDOM","render","StrictMode","store","initialState","createStore","rootReducer","applyMiddleware","thunk","axiosMiddleware","configureStore","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAOe,SAASA,IACtB,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,OAKN,IAAMA,EAAUC,aACZ,SAACC,GAAD,sBACOA,KAEL,CAACC,UCeA,SAAmBC,EAAcC,EAAeC,GACrD,MAAO,CACLC,MAAO,CAAC,UAAW,UAAW,WAC9BC,QAAS,CACPC,QAAS,CACPC,IAAI,GAAD,OAAKN,EAAL,kBAAmBC,EAAnB,iBAAiCC,QDxB5BL,EAOhB,YAA0B,IAAD,MAAPU,EAAO,sBAEiBC,mBAAiB,IAFlC,mBAEhBC,EAFgB,KAEFC,EAFE,OAGWF,mBAAiB,IAH5B,mBAGhBG,EAHgB,KAGLC,EAHK,KAiBvB,OATAC,qBAAU,WACJJ,GAJJF,EAAMR,UAAUU,EAAc,GAAI,KAKjC,CAACA,IAQJ,yBAAKd,UAAU,kBACb,0BAAMmB,GAAG,aAAaC,SAPxB,SAAsBC,GACpBA,EAAMC,iBACNP,EAAgBC,IAK8BhB,UAAU,aACpD,2BAAOuB,MAAOP,EAAWQ,SAAU,SAAAC,GAAC,OAAER,EAAaQ,EAAEC,OAAOH,QAAQI,KAAK,WACzE,uCAIF,yBAAK3B,UAAU,YACZ,UAAAY,EAAMgB,oBAAN,eAAoBC,aAAc,oCACnC,0BAAM7B,UAAU,oBAAhB,eACA,0BAAMA,UAAU,gBAAgBY,EAAMgB,aAAaC,cAGrD,yBAAK7B,UAAU,kBAAf,OACGY,QADH,IACGA,GADH,UACGA,EAAOgB,oBADV,iBACG,EAAqBE,eADxB,aACG,EAA8BC,KAAI,SAAAC,GAAI,OAAE,kBAACC,EAAkBD,WAKpE,SAASC,EAAT,GAAmC,IAARrB,EAAO,oBAChC,OACE,yBAAKZ,UAAU,OAAOkC,MAAO,CAACC,gBAAgB,OAAD,OAAQvB,EAAMwB,UAAd,OAC3C,yBAAKpC,UAAU,cACZY,EAAMyB,QEnDKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qDCdSC,cAAgB,CAC7BC,cCEa,WAAiC,IAAhCzC,EAA+B,uDAAvB,GAAI0C,EAAmB,uCAC7C,OAAQA,EAAOlB,MACb,IAAK,gBACH,MAAO,CACLmB,OAAQD,EAAOpC,SAEnB,QACE,OAAON,IDRXyB,aFEa,WAAkC,IAAjCzB,EAAgC,uDAAxB,GAAI0C,EAAoB,uCAC9C,OAAQA,EAAOlB,MACb,IAAK,UACH,OAAO,eACFxB,EADL,CAEE0B,WAAYkB,2CAA+BF,EAAOpC,QAAQC,QAAQC,IAClEqC,SAAS,IAEb,IAAK,UACH,OAAO,eACF7C,EADL,CAEE6C,SAAS,EACTnB,WAAY,IACTgB,EAAOpC,QAAQwC,MAEtB,IAAK,UACH,OAAO,eACF9C,EADL,CAEE0B,WAAY,GACZmB,SAAS,IAEb,QACE,OAAO7C,MIxBP+C,EAASC,IAAMC,OAAO,CAE1BC,QAASN,2CACTO,aAAc,SCDhBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MDGC,WAA4C,IAApBC,EAAmB,uDAAJ,GACpD,OAAOC,YACLC,EACAF,EACAG,YAAgBC,IAAOC,IAAgBd,KCPtBe,IACf,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJ6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac50676b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport { connect } from \"react-redux\";\nimport {simpleAction} from './reducers/simpleReducer'\nimport {loadAnime} from './reducers/animeReducer'\nimport './App.scss'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <ListPage/>\n    </div>\n  );\n}\n\nconst ListPage= connect(\n    (state) => ({\n        ...state,\n      }),\n      {loadAnime}\n)(List);\n\nfunction List({...props}){\n\n  const [searchString, setSearchString] = useState<string>(\"\");\n  const [inputText, setInputText] = useState<string>(\"\");\n  function simpleAction() {\n    props.loadAnime(searchString, 20, 1);\n  }\n\n  useEffect(() => {\n    if (searchString) simpleAction();\n  }, [searchString]);\n\n  function handleSubmit(event: any) {\n    event.preventDefault();\n    setSearchString(inputText);\n  }\n\n  return(\n  <div className=\"list-container\">\n    <form id=\"searchForm\" onSubmit={handleSubmit} className=\"flex left\">\n        <input value={inputText} onChange={e=>setInputText(e.target.value)} type=\"search\"/>\n        <button>\n          Go\n        </button>\n      </form>\n      <div className=\"loading\">\n        {props.animeReducer?.loadingUrl && <>\n        <span className=\"loading--heading\">Requesting:</span>\n        <span className=\"loading--url\">{props.animeReducer.loadingUrl}</span>\n        </>}\n      </div>\n      <div className=\"card-container\">\n        {props?.animeReducer?.results?.map(char=><CharacterCard {...char}/>)}\n      </div>\n  </div>)\n}\n\nfunction CharacterCard({...props}){\n  return(\n    <div className=\"card\" style={{backgroundImage:`url(${props.image_url})`}}>\n      <div className=\"card--name\">\n        {props.title}\n      </div>\n    </div>\n  )\n}\n\n\n","import { ReducerAction, Dispatch } from \"react\";\nimport { Action } from \"redux\";\n\ninterface Action2 extends Action {\n  payload: any;\n  data?: Object;\n}\n\nexport default (state = {}, action: Action2) => {\n  switch (action.type) {\n    case \"REQUEST\":\n      return {\n        ...state,\n        loadingUrl: process.env.REACT_APP_BASE_URL+action.payload.request.url,\n        loading: true,\n      };\n    case \"SUCCESS\":\n      return {\n        ...state,\n        loading: false,\n        loadingUrl: '',\n        ...action.payload.data,\n      };\n    case \"FAILURE\":\n      return {\n        ...state,\n        loadingUrl: '',\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport function loadAnime(name: string, limit: number, page: number) {\n  return {\n    types: [\"REQUEST\", \"SUCCESS\", \"FAILURE\"],\n    payload: {\n      request: {\n        url: `${name}&limit=${limit}&page=${page}`,\n      },\n    },\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport simpleReducer from \"./simpleReducer\";\nimport animeReducer from './animeReducer';\n\nexport default combineReducers({\n  simpleReducer,\n  animeReducer\n});\n","import { ReducerAction, Dispatch } from \"react\";\nimport { Action } from \"redux\";\n\n\ninterface Action2 extends Action{\n  payload: any;\n}\nexport default (state = {}, action:Action2) => {\n  switch (action.type) {\n    case \"SIMPLE_ACTION\":\n      return {\n        result: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const simpleAction = () => {\n  return {\n    type: \"SIMPLE_ACTION\",\n    payload: \"result_of_simple_action\",\n  }\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport axiosMiddleware from \"redux-axios-middleware\";\nimport axios from \"axios\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst client = axios.create({\n  //all axios can be used, shown in axios documentation\n  baseURL: process.env.REACT_APP_BASE_URL,\n  responseType: \"json\",\n});\n\n\nexport default function configureStore(initialState = {}) {\n  return createStore(\n    rootReducer,\n    initialState,\n    applyMiddleware(thunk, axiosMiddleware(client))\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={configureStore()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}